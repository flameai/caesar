
# Exclude a variety of commonly ignored directories.
src = ["src"]
exclude = [
   "src/caesar/migrations/",
   "src/caesar/tests/"
]

line-length = 88
indent-width = 4

target-version = "py312"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
      "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "ARG005",  # Unused lambda argument
    "B904",    # Use `raise from` to specify exception cause
    "B904",    # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None`
    "COM812",  # Trailing comma missing
    "CPY001",  # Missing copyright notice at top of file
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in `__init__`
    "D203",    # Checks for docstrings on class definitions that are not preceded by a blank line.
    "D205",    # 1 blank line required between summary line and description
    "D212",    # Multi-line docstring summary should start at the first line
    "D213",    # Multi-line docstring summary should start at the second line
    "D400",    # First line should end with a period
    "D401",    # First line of docstring should be in imperative mood
    "D402",    # First line should not be the function's signature
    "D415",    # First line should end with a period, question mark, or exclamation point
    "DJ001",   # Avoid using `null=True` on string-based fields such as CharField
    "DJ012",   # Order of model's inner classes, methods, and fields does not follow the Django Style Guide: field declaration should come before `Meta` class
    "DTZ004",  # The use of `datetime.datetime.utcfromtimestamp()` is not allowed,
    "DTZ005",  # The use of `datetime.datetime.now()` without `tz` argument is not allowed
    "DTZ006",  # The use of `datetime.datetime.fromtimestamp()` without `tz` argument is not allowed
    "DTZ007",  # The use of `datetime.datetime.strptime()` without %z
    "DTZ011",  # The use of `datetime.date.today()` is not allowed
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  #  Boolean positional value in function call
    "FIX001",  # Line contains FIXME, consider resolving the issue
    "FIX002",  # Line contains TODO, consider resolving the issue
    "G004",    # Logging statement uses f-string
    "ISC001",  # The following rules may cause conflicts when used with the formatter
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PGH004",  # Use specific rule codes when using `noqa`
    "PLC0415", #`import` should be at the top-level of a file
    "PLR2004", # Magic value used in comparison, consider replacing 2 with a constant variable
    "PLR6201", #  Use a `set` literal when testing for membership
    "PLR6301", # Method could be a function or static method
    "PT004",   # Fixture does not return anything, add leading underscore
    "PYI041",  # Use `float` instead of `int | float`
    "PYI051",  # `Literal` is redundant in a union with `str`
    "RET505",  #  Unnecessary `elif` after `return` statement
    "RET506",  # Unnecessary `elif` after `raise` statement
    "RUF001",  # Checks for ambiguous unicode characters in strings.
    "RUF002",  # Checks for ambiguous unicode characters in docstring.
    "RUF003",  # Checks for ambiguous unicode characters in comments.
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "S101",    # Use of `assert` detected
    "S105",    # Possible hardcoded password assigned
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001",  # Private member accessed
    "T201",    #  `print` found
    "T203",    # `pprint` found
    "TD001",   # Invalid TODO tag: `FIXME`
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following this TODO
    "TRY400",  # Use `logging.exception` instead of `logging.error`

]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
